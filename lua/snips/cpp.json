{
  "Timer": {
    "prefix": ["timer"],
    "body": [
    "#include <chrono> // for std::chrono functions",
    "",
    "class Timer",
    "{",
    "private:",
        "// Type aliases to make accessing nested type easier",
        "using clock_type = std::chrono::steady_clock;",
        "using second_type = std::chrono::duration<double, std::ratio<1> >;",
    "",
        "std::chrono::time_point<clock_type> m_beg { clock_type::now() };",
    "",
    "public:",
        "void reset()",
        "{",
            "m_beg = clock_type::now();",
        "}",
    "",
        "double elapsed() const",
        "{",
            "return std::chrono::duration_cast<second_type>(clock_type::now() - m_beg).count();",
        "}",
    "};"
    ],
    "description": "Misure the time of execution"
  },
  "RandomNumber": {
    "prefix": ["Random number"],
    "body": [
    "#include <random>",
    "// Generate a random number between min and max (inclusive)",
    "// Assumes srand() has already been called",
    "int getRandomNumber(int min, int max)",
    "{",
        "static constexpr double fraction{ 1.0 / (static_cast<double>(RAND_MAX) + 1.0) };  // static used for efficiency, so we only calculate this value once",
        "// evenly distribute the random number across our range",
        "return static_cast<int>(std::rand() * fraction * (max - min + 1) + min);",
    "}"
    ],
    "description": "Renturn a random number between a specified range"
  }
}
